"============================ my plugins start =============================
set nocompatible " be iMproved, required
filetype off " required

"set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim

call vundle#begin()
Plugin 'nerdtree.vim'
Plugin 'taglist.vim'
Plugin 'indentLine.vim'
Plugin 'vim-airline.vim'
Plugin 'vim-airline-themes.vim'
Plugin 'minibufexpl.vim'
Plugin 'LeaderF.vim'
Plugin 'cscope.vim'
Plugin 'vim-terwin.vim'
Plugin 'Mark.vim'
Plugin 'coc.nvim'
"Plugin 'AutoComplPop.vim'
"Plugin 'supertab.vim'
call vundle#end() " required

filetype plugin indent on " required

"============================ my plugins end=============================
syntax enable
syntax on
set background=dark
set t_Co=256
colorscheme default
hi VertSplit ctermfg=238 ctermbg=238
hi User1 cterm=None ctermfg=208 ctermbg=238
"set statusline=%1*<%F>%r%m%=[Line:%l/%L,Column:%c][%p%%]%*
set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936
set termencoding=utf-8
set encoding=utf-8
set fileformats=unix,dos
set scrolloff=3
set number
set cmdheight=1
set confirm
set autoindent
set tabstop=4
set expandtab
set softtabstop=4
set shiftwidth=4
set backspace=2
set laststatus=2
set ignorecase
set nopaste
set cursorline
set mouse=n
set selection=exclusive
set selectmode=mouse,key
set foldmethod=syntax
set foldlevel=100
set autoread
set autowrite
set nobackup
set noswapfile
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o
nnoremap mm <Esc>daw
nnoremap mn :set number<cr>
nnoremap nm :set nonumber<cr>
nnoremap ww :set ff=unix<cr>:w<cr>
nnoremap qq :q!<cr>
nnoremap . :pwd<cr>
nnoremap - ddp
nnoremap = dd2kp
nnoremap <C-A> <Esc>ggVGy
nnoremap <C-X> <Esc>ggVGd
nnoremap <C-H> <C-W>h
nnoremap <C-L> <C-W>l
nnoremap <C-J> <C-W>j
nnoremap <C-K> <C-W>k
inoremap <C-H> <Esc>i
inoremap <C-L> <Esc>la
inoremap <C-J> <Esc>j$a
inoremap <C-K> <Esc>k$a

"============== indentLine ================
let g:indentLine_char = 'Â¦'
let g:indentLine_showFirstIndentLevel = 1
let g:indentLine_color_term = 125

"============== airline ================
let g:airline_theme = 'dark'
let g:airline_powerline_fonts = 1
let g:airline_skip_empty_sections = 1
let g:airline_extensions = ['coc', 'whitespace']
let g:airline#extensions#coc#enabled = 1
let g:airline#extensions#whitespace#checks = ['trailing']
let g:airline_section_z = airline#section#create(['ln:%l/%L,col:%v,%p%%'])

"============== mark =================
nmap <silent><F9> \m
nmap <silent><F10> :MarkClear<cr>

"========== NERDTree ==============
nnoremap nt :NERDTreeToggle<cr>
let g:NERDTree_title = "[NERDTree]"
let NERDChristmasTree = 1
let NERDTreeAutoCenter = 1
let NERDTreeShowBookmarks = 0
let NERDTreeMouseMode = 1
let NERDTreeShowHidden = 1
let NERDTreeMinimalUI = 1
let NERDTreeWinSize = 20
let NERDTreeWinPos = "right"
let NERDTreeAutoDeleteBuffer = 1
let g:NERDTreeDirArrowExpandable = '+'
let g:NERDTreeDirArrowCollapsible = '-'
au bufenter * if 0==len(filter(range(1, winnr('$')),'empty(getbufvar(winbufnr(v:val), "&bt"))'))|qa!|endif

"============== TagList ====================
nnoremap tl :TlistToggle<cr>
let Tlist_Ctags_Cmd='/usr/bin/ctags'
let Tlist_Close_On_Select = 0
let Tlist_Use_SingleClick = 0
let TlistHighlightTag = 1
let Tlist_Use_Right_Window = 0
let Tlist_WinWidth = 20
let Tlist_Exit_OnlyWindow=1
let Tlist_Show_One_File=1
let Tlist_Auto_Update=1

"============== miniBufexplorer ===============
let g:bfirst = 0
function! MBEToggleCustomer()
    if(g:bfirst == 0)
        let g:startdir = getcwd()
        let g:bfirst = 1
    endif
    cd "startdir"
    execute 'MBEToggle'
    cd -
endfunction
nnoremap fl :call MBEToggleCustomer()<CR>
let g:miniBufExplorerAutoStart = 0
let g:miniBufExplVSplit = 30
let g:miniBufExplMaxSize = 30
let g:miniBufExplBRSplit = 1
let g:miniBufExplUseSingleClick = 0
let g:miniBufExplShowBufNumbers = 0
let g:miniBufExplCloseOnSelect = 1

"============== cscope ====================
let g:cscope_open_location = 1
let g:cscope_auto_update = 0

function! CscopeFilterRules()
    let g:cscope_ignored_file = '\.bin$\|\.exe$'
    let g:cscope_ignored_dir = '\*\*$\|\.repo$\|\.git$\|\.svn$\|x86$\|x86_64$'
    let g:cscope_interested_files = '\.c$\|\.cpp$\|\.h$\|\.hpp$\|\.inc$\|\.S$\|\.as$\|\.asm$\|\.c++$\|\.h++$'

    let dirstr = input("please input interested dir:\n")
    if dirstr != ''
        if exists('g:cscope_interested_dir')
            let g:cscope_interested_dir .= '\|'.join(split(dirstr), '\|')
        else
            let g:cscope_interested_dir = join(split(dirstr), '\|')
        endif
    endif
    if exists('g:cscope_interested_dir')
        echo "\ncscope interested dirs => ".g:cscope_interested_dir
    endif
    unlet dirstr

    let dirstr = input("please input ignored dir:\n")
    if dirstr != ''
        if exists('g:cscope_ignored_dir')
            let g:cscope_ignored_dir .= '\|'.join(map(split(dirstr), 'v:val."$"'), '\|')
        else
            let g:cscope_ignored_dir = join(map(split(dirstr), 'v:val."$"'), '\|')
        endif
    endif
    if exists('g:cscope_ignored_dir')
        echo "\ncscope ignored dirs => ".g:cscope_ignored_dir
    endif
    unlet dirstr
endfunction

function! CscopeCreateDb()
    call CscopeFilterRules()
    call CscopeCreateDB()
    if exists('g:cscope_interested_dir')
        unlet g:cscope_interested_dir
    endif
    if exists('g:cscope_interested_files')
        unlet g:cscope_interested_files
    endif
    if exists('g:cscope_ignored_dir')
        unlet g:cscope_ignored_dir
    endif
    if exists('g:cscope_ignored_file')
        unlet g:cscope_ignored_file
    endif
endfunction

com! -nargs=0 CsCreateDb call CscopeCreateDb()

nnoremap <F1> <C-O>
nnoremap <F2> :call ToggleLocationList()<CR>
nnoremap <F3> :call CscopeFind('g', expand('<cword>'))<CR>
nnoremap <F4> :call CscopeFind('c', expand('<cword>'))<CR>
nnoremap <F5> :call CscopeFind('s', expand('<cword>'))<CR>
nnoremap <F6> :call CscopeFindInteractive(expand('<cword>'))<CR>
nnoremap <F12> :call CscopeUpdateDB()<CR>

"============== LeaderF =====================
"Searcher rg address https://github.com/BurntSushi/ripgrep/releases
let g:Lf_DefaultExternalTool = "rg"
let g:Lf_WindowHeight = 0.20
let g:Lf_ShowHidden = 1
let g:Lf_UseVersionControlTool = 0
let g:Lf_DelimiterChar = ' '
let g:Lf_WildIgnore = {
            \ 'dir': ['.repo','.svn','.git'],
            \ 'file': ['*.bak','*.exe','*.o','*.*.o','*.so',
            \           '*.*cmd','.mod*','*.a','*.bin','*.dat','*.ko','.*.o.cmd']
            \}
nnoremap <silent> <C-P> :LeaderfFile<CR>
nnoremap <silent> <C-B> :LeaderfBufTag<CR>
nnoremap <silent> <C-F> :LeaderfFunction<CR>

"============== autocomplpop =====================
"let g:acp_behaviorKeywordLength = 3

"============== coc =====================
let g:coc_global_extensions = [
        \'coc-json', 'coc-clangd', 'coc-python',
        \'coc-sh', 'coc-tsserver', 'coc-vimlsp']

inoremap <silent><expr> <cr>
        \ pumvisible() ? coc#_select_confirm() : "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" use <tab> for trigger completion and navigate to the next complete item
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction

inoremap <silent><expr> <Tab>
        \ pumvisible() ? "\<C-n>" :
        \ <SID>check_back_space() ? "\<Tab>" :
        \ coc#refresh()

"============== vim mergetool =============
nnoremap m1 :diffget 1<CR> :diffupdate<CR>
nnoremap m2 :diffget 2<CR> :diffupdate<CR>
nnoremap m3 :diffget 3<CR> :diffupdate<CR>
nnoremap m4 :diffget 4<CR> :diffupdate<CR>

"============== terminal windows =================
nnoremap <silent> <C-@> :TerWinToggle<CR>
